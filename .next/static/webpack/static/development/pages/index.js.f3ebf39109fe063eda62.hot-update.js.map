{"version":3,"file":"static/webpack/static/development/pages/index.js.f3ebf39109fe063eda62.hot-update.js","sources":["webpack:///./components/Content.js","webpack:///./components/content.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport ProjectCard from \"./ProjectCard\";\nimport styled from \"styled-components\";\n\nconst StyledContent = styled.article`\n  grid-area: \"content\";\n\n  height: 100%;\n\n  border: solid 3px #4b4b4b;\n  border-radius: 5px;\n  padding: 5px;\n`;\n\nconst Showcase = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: space-between;\n`;\n\nconsole.log(process.env.SPACE_ID);\nconsole.log(process.env.ACCESS_TOKEN);\n\n// create a Contentful client to provide access to helper methods for retreiving data from Contentful\nconst client = require(\"contentful\").createClient({\n  space: process.env.SPACE_ID,\n  accessToken: process.env.ACCESS_TOKEN\n});\n\n// this function retreives and displays our content from Contentful\nfunction Content() {\n  async function fetchContentTypes() {\n    const types = await client.getContentTypes();\n    if (types.items) return types.items;\n    console.log(\"Error getting Content Types.\");\n  }\n  async function fetchEntriesForContentType(contentType) {\n    const entries = await client.getEntries({\n      content_type: contentType.sys.id\n    });\n    if (entries.items) return entries.items;\n    console.log(`Error getting Entries for ${contentType.name}.`);\n  }\n  const [projects, setProjects] = useState([]);\n  // use above async functions to retreive content on initial load\n  useEffect(() => {\n    async function getProjects() {\n      const contentTypes = await fetchContentTypes();\n      const allProjects = await fetchEntriesForContentType(contentTypes[0]);\n      setProjects([...allProjects]);\n    }\n    getProjects();\n  }, []);\n  console.log(projects.map(p => p.fields));\n  // when content is retreived, the fields are mapped over to be displayed by our component\n  return (\n    <StyledContent>\n      <Showcase>\n        <>\n          {projects.length > 0\n            ? projects.map(p => (\n                <ProjectCard\n                  title={p.fields.title}\n                  // image has fields of it's own\n                  image={p.fields.image.fields.file.url}\n                  url={p.fields.url}\n                />\n              ))\n            : null}\n        </>\n      </Showcase>\n    </StyledContent>\n  );\n}\n\nexport default Content;\n","import { useEffect, useState } from \"react\";\nimport ProjectCard from \"./ProjectCard\";\nimport styled from \"styled-components\";\n\nconst StyledContent = styled.article`\n  grid-area: \"content\";\n\n  height: 100%;\n\n  border: solid 3px #4b4b4b;\n  border-radius: 5px;\n  padding: 5px;\n`;\n\nconst Showcase = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: space-between;\n`;\n\nconsole.log(process.env.SPACE_ID);\nconsole.log(process.env.ACCESS_TOKEN);\n\n// create a Contentful client to provide access to helper methods for retreiving data from Contentful\nconst client = require(\"contentful\").createClient({\n  space: process.env.SPACE_ID,\n  accessToken: process.env.ACCESS_TOKEN\n});\n\n// this function retreives and displays our content from Contentful\nfunction Content() {\n  async function fetchContentTypes() {\n    const types = await client.getContentTypes();\n    if (types.items) return types.items;\n    console.log(\"Error getting Content Types.\");\n  }\n  async function fetchEntriesForContentType(contentType) {\n    const entries = await client.getEntries({\n      content_type: contentType.sys.id\n    });\n    if (entries.items) return entries.items;\n    console.log(`Error getting Entries for ${contentType.name}.`);\n  }\n  const [projects, setProjects] = useState([]);\n  // use above async functions to retreive content on initial load\n  useEffect(() => {\n    async function getProjects() {\n      const contentTypes = await fetchContentTypes();\n      const allProjects = await fetchEntriesForContentType(contentTypes[0]);\n      setProjects([...allProjects]);\n    }\n    getProjects();\n  }, []);\n  console.log(projects.map(p => p.fields));\n  // when content is retreived, the fields are mapped over to be displayed by our component\n  return (\n    <StyledContent>\n      <Showcase>\n        <>\n          {projects.length > 0\n            ? projects.map(p => (\n                <ProjectCard\n                  title={p.fields.title}\n                  // image has fields of it's own\n                  image={p.fields.image.fields.file.url}\n                  url={p.fields.url}\n                />\n              ))\n            : null}\n        </>\n      </Showcase>\n    </StyledContent>\n  );\n}\n\nexport default Content;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAUA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAFA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AACA;AAFA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAKA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAaA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAaA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5EA;AACA;AACA;AAEA;AAUA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAFA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AACA;AAFA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAKA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAaA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAaA;AACA;AACA;;;;A","sourceRoot":""}