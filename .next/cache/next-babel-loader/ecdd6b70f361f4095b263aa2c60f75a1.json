{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/mnt/c/Users/Ryan/Desktop/portfolio/components/content.js\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport ProjectCard from \"./ProjectCard\";\nimport styled from \"styled-components\";\nvar Showcase = style;\nconsole.log(process.env.SPACE_ID);\nconsole.log(process.env.ACCESS_TOKEN); // create a Contentful client to provide access to helper methods for retreiving data from Contentful\n\nvar client = require(\"contentful\").createClient({\n  space: process.env.SPACE_ID,\n  accessToken: process.env.ACCESS_TOKEN\n}); // this function retreives and displays our content from Contentful\n\n\nfunction Content() {\n  function fetchContentTypes() {\n    return _fetchContentTypes.apply(this, arguments);\n  }\n\n  function _fetchContentTypes() {\n    _fetchContentTypes = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var types;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return client.getContentTypes();\n\n            case 2:\n              types = _context2.sent;\n\n              if (!types.items) {\n                _context2.next = 5;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", types.items);\n\n            case 5:\n              console.log(\"Error getting Content Types.\");\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _fetchContentTypes.apply(this, arguments);\n  }\n\n  function fetchEntriesForContentType(_x) {\n    return _fetchEntriesForContentType.apply(this, arguments);\n  }\n\n  function _fetchEntriesForContentType() {\n    _fetchEntriesForContentType = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(contentType) {\n      var entries;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return client.getEntries({\n                content_type: contentType.sys.id\n              });\n\n            case 2:\n              entries = _context3.sent;\n\n              if (!entries.items) {\n                _context3.next = 5;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", entries.items);\n\n            case 5:\n              console.log(\"Error getting Entries for \".concat(contentType.name, \".\"));\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _fetchEntriesForContentType.apply(this, arguments);\n  }\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      projects = _useState2[0],\n      setProjects = _useState2[1]; // use above async functions to retreive content on initial load\n\n\n  useEffect(function () {\n    function getProjects() {\n      return _getProjects.apply(this, arguments);\n    }\n\n    function _getProjects() {\n      _getProjects = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var contentTypes, allProjects;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetchContentTypes();\n\n              case 2:\n                contentTypes = _context.sent;\n                _context.next = 5;\n                return fetchEntriesForContentType(contentTypes[0]);\n\n              case 5:\n                allProjects = _context.sent;\n                setProjects(_toConsumableArray(allProjects));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _getProjects.apply(this, arguments);\n    }\n\n    getProjects();\n  }, []);\n  console.log(projects.map(function (p) {\n    return p.fields;\n  })); // when content is retreived, the fields are mapped over to be displayed by our component\n\n  return React.createElement(React.Fragment, null, projects.length > 0 ? projects.map(function (p) {\n    return React.createElement(ProjectCard, {\n      title: p.fields.title // image has fields of it's own\n      ,\n      image: p.fields.image.fields.file.url,\n      url: p.fields.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    });\n  }) : null);\n}\n\nexport default Content;","map":{"version":3,"sources":["/mnt/c/Users/Ryan/Desktop/portfolio/components/content.js"],"names":["useEffect","useState","ProjectCard","styled","Showcase","style","console","log","process","env","SPACE_ID","ACCESS_TOKEN","client","require","createClient","space","accessToken","Content","fetchContentTypes","getContentTypes","types","items","fetchEntriesForContentType","contentType","getEntries","content_type","sys","id","entries","name","projects","setProjects","getProjects","contentTypes","allProjects","map","p","fields","length","title","image","file","url"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport ProjectCard from \"./ProjectCard\";\nimport styled from \"styled-components\";\n\nconst Showcase = style\n\n\nconsole.log(process.env.SPACE_ID);\nconsole.log(process.env.ACCESS_TOKEN);\n\n// create a Contentful client to provide access to helper methods for retreiving data from Contentful\nconst client = require(\"contentful\").createClient({\n  space: process.env.SPACE_ID,\n  accessToken: process.env.ACCESS_TOKEN\n});\n\n// this function retreives and displays our content from Contentful\nfunction Content() {\n  async function fetchContentTypes() {\n    const types = await client.getContentTypes();\n    if (types.items) return types.items;\n    console.log(\"Error getting Content Types.\");\n  }\n  async function fetchEntriesForContentType(contentType) {\n    const entries = await client.getEntries({\n      content_type: contentType.sys.id\n    });\n    if (entries.items) return entries.items;\n    console.log(`Error getting Entries for ${contentType.name}.`);\n  }\n  const [projects, setProjects] = useState([]);\n  // use above async functions to retreive content on initial load\n  useEffect(() => {\n    async function getProjects() {\n      const contentTypes = await fetchContentTypes();\n      const allProjects = await fetchEntriesForContentType(contentTypes[0]);\n      setProjects([...allProjects]);\n    }\n    getProjects();\n  }, []);\n  console.log(projects.map(p => p.fields));\n  // when content is retreived, the fields are mapped over to be displayed by our component\n  return (\n    <>\n      {projects.length > 0\n        ? projects.map(p => (\n          <ProjectCard\n            title={p.fields.title}\n            // image has fields of it's own\n            image={p.fields.image.fields.file.url}\n            url={p.fields.url}\n          />\n        ))\n        : null}\n    </>\n  );\n}\n\nexport default Content;\n"]},"metadata":{},"sourceType":"module"}