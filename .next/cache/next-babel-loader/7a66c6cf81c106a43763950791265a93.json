{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Ryan/Desktop/portfolio/components/content.js\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport ProjectCard from \"./ProjectCard\";\nimport styled from \"styled-components\";\nconst Showcase = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n`;\nconst StyledContent = styled.article`\n  grid-area: \"calltoaction\";\n\n  height: 100%;\n  min-height: 250px;\n\n  border: solid 3px #4b4b4b;\n  border-radius: 5px;\n  padding: 50px;\n`;\nconsole.log(process.env.SPACE_ID);\nconsole.log(process.env.ACCESS_TOKEN); // create a Contentful client to provide access to helper methods for retreiving data from Contentful\n\nconst client = require(\"contentful\").createClient({\n  space: process.env.SPACE_ID,\n  accessToken: process.env.ACCESS_TOKEN\n}); // this function retreives and displays our content from Contentful\n\n\nfunction Content() {\n  async function fetchContentTypes() {\n    const types = await client.getContentTypes();\n    if (types.items) return types.items;\n    console.log(\"Error getting Content Types.\");\n  }\n\n  async function fetchEntriesForContentType(contentType) {\n    const entries = await client.getEntries({\n      content_type: contentType.sys.id\n    });\n    if (entries.items) return entries.items;\n    console.log(`Error getting Entries for ${contentType.name}.`);\n  }\n\n  const [projects, setProjects] = useState([]); // use above async functions to retreive content on initial load\n\n  useEffect(() => {\n    async function getProjects() {\n      const contentTypes = await fetchContentTypes();\n      const allProjects = await fetchEntriesForContentType(contentTypes[0]);\n      setProjects([...allProjects]);\n    }\n\n    getProjects();\n  }, []);\n  console.log(projects.map(p => p.fields)); // when content is retreived, the fields are mapped over to be displayed by our component\n\n  return React.createElement(StyledContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Showcase, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(React.Fragment, null, projects.length > 0 ? projects.map(p => React.createElement(ProjectCard, {\n    title: p.fields.title // image has fields of it's own\n    ,\n    image: p.fields.image.fields.file.url,\n    url: p.fields.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })) : null)));\n}\n\nexport default Content;","map":{"version":3,"sources":["/mnt/c/Users/Ryan/Desktop/portfolio/components/content.js"],"names":["useEffect","useState","ProjectCard","styled","Showcase","div","StyledContent","article","console","log","process","env","SPACE_ID","ACCESS_TOKEN","client","require","createClient","space","accessToken","Content","fetchContentTypes","types","getContentTypes","items","fetchEntriesForContentType","contentType","entries","getEntries","content_type","sys","id","name","projects","setProjects","getProjects","contentTypes","allProjects","map","p","fields","length","title","image","file","url"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,QAAQ,GAAGD,MAAM,CAACE,GAAI;;;;CAA5B;AAMA,MAAMC,aAAa,GAAGH,MAAM,CAACI,OAAQ;;;;;;;;;CAArC;AAWAC,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYC,QAAxB;AACAJ,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYE,YAAxB,E,CAEA;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBC,YAAtB,CAAmC;AAChDC,EAAAA,KAAK,EAAEP,OAAO,CAACC,GAAR,CAAYC,QAD6B;AAEhDM,EAAAA,WAAW,EAAER,OAAO,CAACC,GAAR,CAAYE;AAFuB,CAAnC,CAAf,C,CAKA;;;AACA,SAASM,OAAT,GAAmB;AACjB,iBAAeC,iBAAf,GAAmC;AACjC,UAAMC,KAAK,GAAG,MAAMP,MAAM,CAACQ,eAAP,EAApB;AACA,QAAID,KAAK,CAACE,KAAV,EAAiB,OAAOF,KAAK,CAACE,KAAb;AACjBf,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACD;;AACD,iBAAee,0BAAf,CAA0CC,WAA1C,EAAuD;AACrD,UAAMC,OAAO,GAAG,MAAMZ,MAAM,CAACa,UAAP,CAAkB;AACtCC,MAAAA,YAAY,EAAEH,WAAW,CAACI,GAAZ,CAAgBC;AADQ,KAAlB,CAAtB;AAGA,QAAIJ,OAAO,CAACH,KAAZ,EAAmB,OAAOG,OAAO,CAACH,KAAf;AACnBf,IAAAA,OAAO,CAACC,GAAR,CAAa,6BAA4BgB,WAAW,CAACM,IAAK,GAA1D;AACD;;AACD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BhC,QAAQ,CAAC,EAAD,CAAxC,CAbiB,CAcjB;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAekC,WAAf,GAA6B;AAC3B,YAAMC,YAAY,GAAG,MAAMf,iBAAiB,EAA5C;AACA,YAAMgB,WAAW,GAAG,MAAMZ,0BAA0B,CAACW,YAAY,CAAC,CAAD,CAAb,CAApD;AACAF,MAAAA,WAAW,CAAC,CAAC,GAAGG,WAAJ,CAAD,CAAX;AACD;;AACDF,IAAAA,WAAW;AACZ,GAPQ,EAON,EAPM,CAAT;AAQA1B,EAAAA,OAAO,CAACC,GAAR,CAAYuB,QAAQ,CAACK,GAAT,CAAaC,CAAC,IAAIA,CAAC,CAACC,MAApB,CAAZ,EAvBiB,CAwBjB;;AACA,SACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,0CACGP,QAAQ,CAACQ,MAAT,GAAkB,CAAlB,GACGR,QAAQ,CAACK,GAAT,CAAaC,CAAC,IACZ,oBAAC,WAAD;AACE,IAAA,KAAK,EAAEA,CAAC,CAACC,MAAF,CAASE,KADlB,CAEE;AAFF;AAGE,IAAA,KAAK,EAAEH,CAAC,CAACC,MAAF,CAASG,KAAT,CAAeH,MAAf,CAAsBI,IAAtB,CAA2BC,GAHpC;AAIE,IAAA,GAAG,EAAEN,CAAC,CAACC,MAAF,CAASK,GAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADH,GASG,IAVN,CADF,CADF,CADF;AAkBD;;AAED,eAAezB,OAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport ProjectCard from \"./ProjectCard\";\nimport styled from \"styled-components\";\n\nconst Showcase = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n`;\n\nconst StyledContent = styled.article`\n  grid-area: \"calltoaction\";\n\n  height: 100%;\n  min-height: 250px;\n\n  border: solid 3px #4b4b4b;\n  border-radius: 5px;\n  padding: 50px;\n`;\n\nconsole.log(process.env.SPACE_ID);\nconsole.log(process.env.ACCESS_TOKEN);\n\n// create a Contentful client to provide access to helper methods for retreiving data from Contentful\nconst client = require(\"contentful\").createClient({\n  space: process.env.SPACE_ID,\n  accessToken: process.env.ACCESS_TOKEN\n});\n\n// this function retreives and displays our content from Contentful\nfunction Content() {\n  async function fetchContentTypes() {\n    const types = await client.getContentTypes();\n    if (types.items) return types.items;\n    console.log(\"Error getting Content Types.\");\n  }\n  async function fetchEntriesForContentType(contentType) {\n    const entries = await client.getEntries({\n      content_type: contentType.sys.id\n    });\n    if (entries.items) return entries.items;\n    console.log(`Error getting Entries for ${contentType.name}.`);\n  }\n  const [projects, setProjects] = useState([]);\n  // use above async functions to retreive content on initial load\n  useEffect(() => {\n    async function getProjects() {\n      const contentTypes = await fetchContentTypes();\n      const allProjects = await fetchEntriesForContentType(contentTypes[0]);\n      setProjects([...allProjects]);\n    }\n    getProjects();\n  }, []);\n  console.log(projects.map(p => p.fields));\n  // when content is retreived, the fields are mapped over to be displayed by our component\n  return (\n    <StyledContent>\n      <Showcase>\n        <>\n          {projects.length > 0\n            ? projects.map(p => (\n                <ProjectCard\n                  title={p.fields.title}\n                  // image has fields of it's own\n                  image={p.fields.image.fields.file.url}\n                  url={p.fields.url}\n                />\n              ))\n            : null}\n        </>\n      </Showcase>\n    </StyledContent>\n  );\n}\n\nexport default Content;\n"]},"metadata":{},"sourceType":"module"}